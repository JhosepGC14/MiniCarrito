{"version":3,"sources":["components/Header.jsx","components/Footer.jsx","components/Products.jsx","components/Carrito.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","titulo","fecha","id","className","Footer","Products","producto","carrito","agregarProducto","productos","nombre","precio","type","onClick","filter","selectProduct","eliminarProducto","Carrito","length","map","key","App","useState","products","Date","getFullYear","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0KAWeA,MATf,YAAoC,IAAlBC,EAAiB,EAAjBA,OAAQC,EAAS,EAATA,MACxB,OACE,wBAAIC,GAAG,aAAaC,UAAU,cAC3BH,EACAC,ICEQG,EANA,SAAC,GAAD,IAAGH,EAAH,EAAGA,MAAH,OACb,gCACE,iEAAyCA,K,OCgC9BI,EAlCE,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,SAAUC,EAA0C,EAA1CA,QAASC,EAAiC,EAAjCA,gBAAiBC,EAAgB,EAAhBA,UAC9CC,EAAuBJ,EAAvBI,OAAQC,EAAeL,EAAfK,OAAQT,EAAOI,EAAPJ,GAexB,OACE,4BACE,4BAAKQ,GACL,0CAAgBC,GAEfF,EACC,4BAAQG,KAAK,SAASC,QAAS,kBAlBf,SAACX,GACrB,IAAMI,EAAWG,EAAUK,QAAO,SAACR,GAAD,OAAcA,EAASJ,KAAOA,KAAI,GACpEM,EAAgB,GAAD,mBAAKD,GAAL,CAAcD,KAgBYS,CAAcb,KAAnD,WAIA,4BAAQU,KAAK,SAASC,QAAS,kBAhBZ,SAACX,GACxB,IAAMO,EAAYF,EAAQO,QAAO,SAACR,GAAD,OAAcA,EAASJ,KAAOA,KAE/DM,EAAgBC,GAayBO,CAAiBd,KAAtD,cCNOe,G,MAlBC,SAAC,GAAD,IAAGV,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACd,yBAAKL,UAAU,WACb,qDACoB,IAAnBI,EAAQW,OACP,6DAEAX,EAAQY,KAAI,SAACb,GAAD,OACV,kBAAC,EAAD,CACEc,IAAKd,EAASJ,GACdI,SAAUA,EACVC,QAASA,EACTC,gBAAiBA,UCyBZa,MAlCf,WAAe,MAEuBC,mBAAS,CAC3C,CAAEpB,GAAI,EAAGQ,OAAQ,oBAAqBC,OAAQ,IAC9C,CAAET,GAAI,EAAGQ,OAAQ,mBAAoBC,OAAQ,IAC7C,CAAET,GAAI,EAAGQ,OAAQ,kBAAmBC,OAAQ,IAC5C,CAAET,GAAI,EAAGQ,OAAQ,sBAAuBC,OAAQ,MANrC,mBAENY,EAFM,aAUsBD,mBAAS,KAV/B,mBAUNf,EAVM,KAUGC,EAVH,KAaPP,GAAQ,IAAIuB,MAAOC,cAEzB,OACE,kBAAC,WAAD,KACE,kBAAC,EAAD,CAAQzB,OAAO,kBAAkBC,MAAOA,IACxC,kDACCsB,EAASJ,KAAI,SAACb,GAAD,OACZ,kBAAC,EAAD,CACEc,IAAKd,EAASJ,GACdI,SAAUA,EACVC,QAASA,EACTE,UAAWc,EACXf,gBAAiBA,OAGrB,kBAAC,EAAD,CAASD,QAASA,EAASC,gBAAiBA,IAC5C,kBAAC,EAAD,CAAQP,MAAOA,MCvBDyB,QACW,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbJC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.1702e24e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Header({ titulo, fecha }) {\r\n  return (\r\n    <h1 id=\"encabezado\" className=\"encabezado\">\r\n      {titulo}\r\n      {fecha}\r\n    </h1>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nconst Footer = ({ fecha }) => (\r\n  <footer>\r\n    <p>Todos los derechos reservados &copy; {fecha}</p>\r\n  </footer>\r\n);\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\n\r\nconst Products = ({ producto, carrito, agregarProducto, productos }) => {\r\n  const { nombre, precio, id } = producto;\r\n\r\n  //Agregar producto al carrito\r\n  const selectProduct = (id) => {\r\n    const producto = productos.filter((producto) => producto.id === id)[0];\r\n    agregarProducto([...carrito, producto]);\r\n  };\r\n\r\n  //Eliminar producto del carrito\r\n  const eliminarProducto = (id) => {\r\n    const productos = carrito.filter((producto) => producto.id !== id);\r\n    //colorcar los productos en el state\r\n    agregarProducto(productos);\r\n  };\r\n\r\n  return (\r\n    <ul>\r\n      <li>{nombre}</li>\r\n      <span>Precio: ${precio}</span>\r\n\r\n      {productos ? (\r\n        <button type=\"button\" onClick={() => selectProduct(id)}>\r\n          Comprar\r\n        </button>\r\n      ) : (\r\n        <button type=\"button\" onClick={() => eliminarProducto(id)}>\r\n          Eliminar\r\n        </button>\r\n      )}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default Products;\r\n","import React from \"react\";\r\nimport \"./css/carrito.css\";\r\nimport Products from \"./Products\";\r\n\r\nconst Carrito = ({ carrito, agregarProducto }) => (\r\n  <div className=\"carrito\">\r\n    <h2>Tu Carrito de compras</h2>\r\n    {carrito.length === 0 ? (\r\n      <p>No hay Elementosen el Carrito.</p>\r\n    ) : (\r\n      carrito.map((producto) => (\r\n        <Products\r\n          key={producto.id}\r\n          producto={producto}\r\n          carrito={carrito}\r\n          agregarProducto={agregarProducto}\r\n        />\r\n      ))\r\n    )}\r\n  </div>\r\n);\r\n\r\nexport default Carrito;\r\n","import React, { Fragment, useState } from \"react\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport Products from \"./components/Products\";\nimport Carrito from \"./components/Carrito\";\n\nfunction App() {\n  //crear listado de productos\n  const [products, guardarProducts] = useState([\n    { id: 1, nombre: \"Camisa de ReactJS\", precio: 50 },\n    { id: 2, nombre: \"Camisa de NodeJS\", precio: 60 },\n    { id: 3, nombre: \"Camisa de VueJS\", precio: 30 },\n    { id: 4, nombre: \"Camisa de Angular 9\", precio: 45 },\n  ]);\n\n  //state para un carrito de compras\n  const [carrito, agregarProducto] = useState([]);\n\n  //obtener la fecha\n  const fecha = new Date().getFullYear();\n\n  return (\n    <Fragment>\n      <Header titulo=\"Tienda Virtual \" fecha={fecha} />\n      <h1>Lista de Productos</h1>\n      {products.map((producto) => (\n        <Products\n          key={producto.id}\n          producto={producto}\n          carrito={carrito}\n          productos={products}\n          agregarProducto={agregarProducto}\n        />\n      ))}\n      <Carrito carrito={carrito} agregarProducto={agregarProducto} />\n      <Footer fecha={fecha} />\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}